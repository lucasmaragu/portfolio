---
import "@fontsource-variable/onest"

import Header from "../components/Header.astro"
import Footer from "../components/Footer.astro"
import { ViewTransitions } from "astro:transitions"

interface Props {
  title: string
  description: string
  ogImage?: string
}

const { description, title, ogImage } = Astro.props


---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />

    <!-- Meta para redes sociales (Open Graph) -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content="https://lucasmaragu.vercel.app/imagen-destacada.png" />
    <meta property="og:url" content={Astro.site} />
    
    <!-- Meta de Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    {ogImage && <meta name="twitter:image" content={ogImage} />}

    <!-- Meta para la optimización SEO -->
    <meta name="robots" content="index, follow" />
    <meta name="author" content="Lucas Martínez Aguilera"/>
    
    <!-- Definir el título de la página -->
    <title>{title}</title>
    
    <ViewTransitions />
  </head>

  <body class="relative text-black dark:text-white">
    <div
      class="absolute top-0 bottom-0 z-[-2] min-h-screen w-full bg-gray-50 dark:bg-gray-950
      bg-[radial-gradient(ellipse_80%_80%_at_50%_-20%,rgba(236,210,255,0.3),rgba(255,255,255,0.9))]
      dark:bg-[radial-gradient(ellipse_80%_80%_at_50%_-20%,rgba(120,87,255,0.15),rgba(255,255,255,0))]"
    >
    </div>
    <Header />
    <slot />
    <Footer />
    <style is:global>
      :root {
        color-scheme: light dark;
      }

      html {
        font-family: "Onest Variable", system-ui, sans-serif;
        scroll-behavior: smooth;
      }

      body {
        color: rgba(17, 17, 17, 0.9);
        display: flex;
        flex-direction: column;
        min-height: 100vh;
        overscroll-behavior: none;
      }

      @media (prefers-reduced-motion: reduce) {
        html {
          scroll-behavior: auto;
        }
      }

      @media (prefers-color-scheme: dark) {
        body {
          color: rgba(255, 255, 255, 0.9);
        }
      }

      #header-nav {
        animation: blur linear both 0.5s;
        animation-timeline: scroll();
        animation-range: 0 500px;
      }

      @keyframes blur {
        to {
          backdrop-filter: blur(20px);
          border-width: 1px;
          border-color: rgba(0, 0, 0);
          padding: 0.25rem 0.75rem;
          display: flex;
          flex-direction: row;
          align-items: center;
          background-color: rgb(229, 229, 229);
          border-radius: 9999px;
        }
      }

      @media (prefers-color-scheme: dark) {
        @keyframes blur {
          from {
            border: 0px;
          }
          to {
            box-shadow:
              0px 5px 50px -5px rgba(0, 0, 0, 0.1),
              0px 0px 0 1px rgba(0, 0, 0, 0.3);
            background: rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(20px);
            border-width: 1px;
            border-color: rgba(0, 0, 0);
            padding-left: 0.75rem;
            padding-right: 0.75rem;
            padding-top: 0.25rem;
            padding-bottom: 0.25rem;
            display: flex;
            flex-direction: row;
            align-items: center;
            background-color: rgba(0, 0, 0, 0.3);
            border-radius: 9999px;
          }
        }
      }
      
      /* Language switching styles */
      .lang-es {
        display: none;
      }
      
      .lang-en {
        display: none;
      }
      
      html.english .lang-en {
        display: block;
      }
      
      html.spanish .lang-es {
        display: block;
      }
      
      /* For inline elements */
      html.english span.lang-en,
      html.english a.lang-en {
        display: inline;
      }
      
      html.spanish span.lang-es,
      html.spanish a.lang-es {
        display: inline;
      }
      
      /* For flex elements */
      html.english .lang-en-flex {
        display: flex;
      }
      
      html.spanish .lang-es-flex {
        display: flex;
      }
    </style>
    
    <script is:inline>
      // Initialize language on page load
      document.addEventListener('astro:page-load', () => {
        const language = localStorage.getItem('language') || 'Español';
        document.documentElement.classList.remove('english', 'spanish');
        document.documentElement.classList.add(language === 'English' ? 'english' : 'spanish');
      });
    </script>
  </body>
</html>

